/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ItinerariesIndexRouteImport } from './routes/itineraries/index'
import { Route as ChatIndexRouteImport } from './routes/chat/index'
import { Route as ItinerariesItineraryIdIndexRouteImport } from './routes/itineraries/$itineraryId/index'
import { Route as authRegisterIndexRouteImport } from './routes/(auth)/register/index'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ItinerariesIndexRoute = ItinerariesIndexRouteImport.update({
  id: '/itineraries/',
  path: '/itineraries/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatIndexRoute = ChatIndexRouteImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => rootRouteImport,
} as any)
const ItinerariesItineraryIdIndexRoute =
  ItinerariesItineraryIdIndexRouteImport.update({
    id: '/itineraries/$itineraryId/',
    path: '/itineraries/$itineraryId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const authRegisterIndexRoute = authRegisterIndexRouteImport.update({
  id: '/(auth)/register/',
  path: '/register/',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/(auth)/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chat': typeof ChatIndexRoute
  '/itineraries': typeof ItinerariesIndexRoute
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/itineraries/$itineraryId': typeof ItinerariesItineraryIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/chat': typeof ChatIndexRoute
  '/itineraries': typeof ItinerariesIndexRoute
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/itineraries/$itineraryId': typeof ItinerariesItineraryIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/chat/': typeof ChatIndexRoute
  '/itineraries/': typeof ItinerariesIndexRoute
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(auth)/register/': typeof authRegisterIndexRoute
  '/itineraries/$itineraryId/': typeof ItinerariesItineraryIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/itineraries'
    | '/login'
    | '/register'
    | '/itineraries/$itineraryId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat'
    | '/itineraries'
    | '/login'
    | '/register'
    | '/itineraries/$itineraryId'
  id:
    | '__root__'
    | '/'
    | '/chat/'
    | '/itineraries/'
    | '/(auth)/login/'
    | '/(auth)/register/'
    | '/itineraries/$itineraryId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatIndexRoute: typeof ChatIndexRoute
  ItinerariesIndexRoute: typeof ItinerariesIndexRoute
  authLoginIndexRoute: typeof authLoginIndexRoute
  authRegisterIndexRoute: typeof authRegisterIndexRoute
  ItinerariesItineraryIdIndexRoute: typeof ItinerariesItineraryIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/itineraries/': {
      id: '/itineraries/'
      path: '/itineraries'
      fullPath: '/itineraries'
      preLoaderRoute: typeof ItinerariesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/': {
      id: '/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/itineraries/$itineraryId/': {
      id: '/itineraries/$itineraryId/'
      path: '/itineraries/$itineraryId'
      fullPath: '/itineraries/$itineraryId'
      preLoaderRoute: typeof ItinerariesItineraryIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/register/': {
      id: '/(auth)/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatIndexRoute: ChatIndexRoute,
  ItinerariesIndexRoute: ItinerariesIndexRoute,
  authLoginIndexRoute: authLoginIndexRoute,
  authRegisterIndexRoute: authRegisterIndexRoute,
  ItinerariesItineraryIdIndexRoute: ItinerariesItineraryIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
