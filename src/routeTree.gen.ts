/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RegisterIndexRouteImport } from './routes/register/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as ItinerariesIndexRouteImport } from './routes/itineraries/index'
import { Route as ChatIndexRouteImport } from './routes/chat/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as ApiDemoTqTodosRouteImport } from './routes/api.demo-tq-todos'
import { Route as ApiDemoNamesRouteImport } from './routes/api.demo-names'
import { Route as ItinerariesItineraryIdIndexRouteImport } from './routes/itineraries/$itineraryId/index'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo.start.api-request'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterIndexRoute = RegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const ItinerariesIndexRoute = ItinerariesIndexRouteImport.update({
  id: '/itineraries/',
  path: '/itineraries/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatIndexRoute = ChatIndexRouteImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDemoTqTodosRoute = ApiDemoTqTodosRouteImport.update({
  id: '/api/demo-tq-todos',
  path: '/api/demo-tq-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDemoNamesRoute = ApiDemoNamesRouteImport.update({
  id: '/api/demo-names',
  path: '/api/demo-names',
  getParentRoute: () => rootRouteImport,
} as any)
const ItinerariesItineraryIdIndexRoute =
  ItinerariesItineraryIdIndexRouteImport.update({
    id: '/itineraries/$itineraryId/',
    path: '/itineraries/$itineraryId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/demo-tq-todos': typeof ApiDemoTqTodosRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/chat': typeof ChatIndexRoute
  '/itineraries': typeof ItinerariesIndexRoute
  '/login': typeof LoginIndexRoute
  '/register': typeof RegisterIndexRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/itineraries/$itineraryId': typeof ItinerariesItineraryIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/demo-tq-todos': typeof ApiDemoTqTodosRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/chat': typeof ChatIndexRoute
  '/itineraries': typeof ItinerariesIndexRoute
  '/login': typeof LoginIndexRoute
  '/register': typeof RegisterIndexRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/itineraries/$itineraryId': typeof ItinerariesItineraryIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/demo-tq-todos': typeof ApiDemoTqTodosRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/chat/': typeof ChatIndexRoute
  '/itineraries/': typeof ItinerariesIndexRoute
  '/login/': typeof LoginIndexRoute
  '/register/': typeof RegisterIndexRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/itineraries/$itineraryId/': typeof ItinerariesItineraryIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api/demo-names'
    | '/api/demo-tq-todos'
    | '/demo/tanstack-query'
    | '/chat'
    | '/itineraries'
    | '/login'
    | '/register'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/itineraries/$itineraryId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api/demo-names'
    | '/api/demo-tq-todos'
    | '/demo/tanstack-query'
    | '/chat'
    | '/itineraries'
    | '/login'
    | '/register'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/itineraries/$itineraryId'
  id:
    | '__root__'
    | '/'
    | '/api/demo-names'
    | '/api/demo-tq-todos'
    | '/demo/tanstack-query'
    | '/chat/'
    | '/itineraries/'
    | '/login/'
    | '/register/'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/itineraries/$itineraryId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiDemoNamesRoute: typeof ApiDemoNamesRoute
  ApiDemoTqTodosRoute: typeof ApiDemoTqTodosRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  ChatIndexRoute: typeof ChatIndexRoute
  ItinerariesIndexRoute: typeof ItinerariesIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  RegisterIndexRoute: typeof RegisterIndexRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
  ItinerariesItineraryIdIndexRoute: typeof ItinerariesItineraryIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register/': {
      id: '/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/itineraries/': {
      id: '/itineraries/'
      path: '/itineraries'
      fullPath: '/itineraries'
      preLoaderRoute: typeof ItinerariesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/': {
      id: '/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/demo-tq-todos': {
      id: '/api/demo-tq-todos'
      path: '/api/demo-tq-todos'
      fullPath: '/api/demo-tq-todos'
      preLoaderRoute: typeof ApiDemoTqTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/demo-names': {
      id: '/api/demo-names'
      path: '/api/demo-names'
      fullPath: '/api/demo-names'
      preLoaderRoute: typeof ApiDemoNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/itineraries/$itineraryId/': {
      id: '/itineraries/$itineraryId/'
      path: '/itineraries/$itineraryId'
      fullPath: '/itineraries/$itineraryId'
      preLoaderRoute: typeof ItinerariesItineraryIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiDemoNamesRoute: ApiDemoNamesRoute,
  ApiDemoTqTodosRoute: ApiDemoTqTodosRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  ChatIndexRoute: ChatIndexRoute,
  ItinerariesIndexRoute: ItinerariesIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  RegisterIndexRoute: RegisterIndexRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
  ItinerariesItineraryIdIndexRoute: ItinerariesItineraryIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
